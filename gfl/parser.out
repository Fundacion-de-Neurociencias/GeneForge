Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> IDENTIFIER LBRACE attributes RBRACE
Rule 5     attributes -> attributes attribute
Rule 6     attributes -> attribute
Rule 7     attribute -> IDENTIFIER EQUALS STRING

Terminals, with rules where they appear

EQUALS               : 7
IDENTIFIER           : 4 7
LBRACE               : 4
RBRACE               : 4
STRING               : 7
error                : 

Nonterminals, with rules where they appear

attribute            : 5 6
attributes           : 4 5
program              : 0
statement            : 2 3
statements           : 1 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER LBRACE attributes RBRACE

    IDENTIFIER      shift and go to state 4

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER LBRACE attributes RBRACE

    $end            reduce using rule 1 (program -> statements .)
    IDENTIFIER      shift and go to state 4

    statement                      shift and go to state 5

state 3

    (3) statements -> statement .

    IDENTIFIER      reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> IDENTIFIER . LBRACE attributes RBRACE

    LBRACE          shift and go to state 6


state 5

    (2) statements -> statements statement .

    IDENTIFIER      reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 6

    (4) statement -> IDENTIFIER LBRACE . attributes RBRACE
    (5) attributes -> . attributes attribute
    (6) attributes -> . attribute
    (7) attribute -> . IDENTIFIER EQUALS STRING

    IDENTIFIER      shift and go to state 7

    attributes                     shift and go to state 8
    attribute                      shift and go to state 9

state 7

    (7) attribute -> IDENTIFIER . EQUALS STRING

    EQUALS          shift and go to state 10


state 8

    (4) statement -> IDENTIFIER LBRACE attributes . RBRACE
    (5) attributes -> attributes . attribute
    (7) attribute -> . IDENTIFIER EQUALS STRING

    RBRACE          shift and go to state 11
    IDENTIFIER      shift and go to state 7

    attribute                      shift and go to state 12

state 9

    (6) attributes -> attribute .

    RBRACE          reduce using rule 6 (attributes -> attribute .)
    IDENTIFIER      reduce using rule 6 (attributes -> attribute .)


state 10

    (7) attribute -> IDENTIFIER EQUALS . STRING

    STRING          shift and go to state 13


state 11

    (4) statement -> IDENTIFIER LBRACE attributes RBRACE .

    IDENTIFIER      reduce using rule 4 (statement -> IDENTIFIER LBRACE attributes RBRACE .)
    $end            reduce using rule 4 (statement -> IDENTIFIER LBRACE attributes RBRACE .)


state 12

    (5) attributes -> attributes attribute .

    RBRACE          reduce using rule 5 (attributes -> attributes attribute .)
    IDENTIFIER      reduce using rule 5 (attributes -> attributes attribute .)


state 13

    (7) attribute -> IDENTIFIER EQUALS STRING .

    RBRACE          reduce using rule 7 (attribute -> IDENTIFIER EQUALS STRING .)
    IDENTIFIER      reduce using rule 7 (attribute -> IDENTIFIER EQUALS STRING .)

